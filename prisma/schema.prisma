// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  name     String?
  role     String @default("USER") // USER, ADMIN
  image    String?
  bookings Booking[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Equipment {
  id          String    @id @default(cuid())
  name        String
  description String?
  location    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@map("equipment")
}

model TimeSlot {
  id        String    @id @default(cuid())
  startTime String    // Format: "HH:MM"
  endTime   String    // Format: "HH:MM"
  bookings  Booking[]

  @@unique([startTime, endTime])
  @@map("time_slots")
}

model Booking {
  id          String   @id @default(cuid())
  userId      String?
  equipmentId String
  timeSlotId  String?
  startTime   DateTime
  endTime     DateTime
  purpose     String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED, CANCELLED
  adminNotes  String?  // Admin can add notes when approving/rejecting
  guestName   String?  // For non-authenticated users
  guestEmail  String?  // For non-authenticated users
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User?      @relation(fields: [userId], references: [id])
  equipment Equipment  @relation(fields: [equipmentId], references: [id])
  timeSlot  TimeSlot?  @relation(fields: [timeSlotId], references: [id])

  @@map("bookings")
}
