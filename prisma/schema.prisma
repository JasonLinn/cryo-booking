// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  department    String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  bookings Booking[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Equipment {
  id          String  @id @default(cuid())
  name        String
  description String?
  location    String?
  isActive    Boolean @default(true)
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings  Booking[]
  timeSlots TimeSlot[]

  @@map("equipment")
}

model TimeSlot {
  id          String  @id @default(cuid())
  equipmentId String
  dayOfWeek   Int     // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startHour   Int     // 0-23
  endHour     Int     // 0-23
  isActive    Boolean @default(true)

  equipment Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@map("time_slots")
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  equipmentId String
  startTime   DateTime
  endTime     DateTime
  purpose     String
  status      BookingStatus @default(PENDING)
  notes       String?
  adminNotes  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@map("bookings")
}
