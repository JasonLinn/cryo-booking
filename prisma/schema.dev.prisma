// 開發環境 Prisma Schema (SQLite)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  name     String?
  role     Role   @default(USER)
  password String?
  
  // NextAuth 相關欄位
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // 預約相關
  bookings Booking[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NextAuth 必要的 models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 業務相關 models
model Equipment {
  id          String @id @default(cuid())
  name        String
  description String?
  location    String?
  isActive    Boolean @default(true)
  
  bookings Booking[]
  timeSlots TimeSlot[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeSlot {
  id          String @id @default(cuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  
  dayOfWeek   Int     // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startHour   Int     // 0-23
  endHour     Int     // 0-23
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id          String @id @default(cuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  
  userId    String?
  user      User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // 訪客預約欄位
  guestName  String?
  guestEmail String?
  
  startTime DateTime
  endTime   DateTime
  purpose   String
  status    BookingStatus @default(PENDING)
  
  // 審核資訊
  approvedAt   DateTime?
  approvedBy   String?
  rejectedAt   DateTime?
  rejectedBy   String?
  rejectionReason String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums (使用字串型態，因為 SQLite 不支援原生 enum)
enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
}
